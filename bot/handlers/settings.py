from bot.misc import *
from bot.keyboards import bot_action, gen_confirmation
from bot.keyboards import settings as kb

from bot.handlers.menu import open_bot_list


@dp.callback_query_handler(bot_action.filter(action="settings"))
async def open_settings(cb: CallbackQuery, callback_data: dict):
    bot_dc = await bots_db.get(int(callback_data["id"]))
    await cb.message.answer(
        "<b>‚öôÔ∏è–ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:</b>\n\n\
<i>‚ñ∏ –ê–≤—Ç–æ–ø—Ä–∏–π–æ–º- –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–π–º–∞—î –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª.\n\
‚ñ∏ –ó–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤- –±–æ—Ç –∑–∞–ø–∏—Å—É—î –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ—Å–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–∞–ø—á—ñ.\n\
‚ñ∏ –í–∏–¥–∞–ª–∏—Ç–∏ –±–æ—Ç–∞- –≤–∏–¥–∞–ª—è—î –±–æ—Ç–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª—é. –í–∏–¥–∞–ª–µ–Ω–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–∞ –∑–∞–Ω–æ–≤–æ –¥–æ–¥–∞—Ç–∏ –≤ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö.\n</i>",
        reply_markup=kb.gen_settings_menu(bot_dc)
    )
    await safe_del_msg(cb.from_user.id, cb.message.message_id)


@dp.callback_query_handler(bot_action.filter(action="delete_bot"))
async def delete_bot(cb: CallbackQuery, callback_data: dict):
    bot_dc = await bots_db.get(int(callback_data["id"]))
    await manager.delete_webhook(bot_dc)
    await cb.message.answer(
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±–æ—Ç–∞?",
        reply_markup=gen_confirmation(
            bot_action.new(bot_dc.id, "confirm_deletion"),
            bot_action.new(bot_dc.id, "open_menu")
        )
    )
    await safe_del_msg(cb.from_user.id, cb.message.message_id)


@dp.callback_query_handler(bot_action.filter(action="confirm_deletion"))
async def deletion_confirm(cb: CallbackQuery, callback_data: dict, state: FSMContext):
    bot_dc = await bots_db.get(int(callback_data["id"]))
    await manager.delete_webhook(bot_dc)
    bot_dc.admin = None
    bot_status = 0
    await bots_db.update(bot_dc)
    await open_bot_list(cb, state)


@dp.callback_query_handler(bot_action.filter(action="autoapprove_on"))
async def approve_on(cb: CallbackQuery, callback_data: dict):
    bot_dc = await bots_db.get(int(callback_data["id"]))
    bot_dc.settings.set_autoapprove(True)
    await bots_db.update(bot_dc)
    await open_settings(cb, callback_data)


@dp.callback_query_handler(bot_action.filter(action="autoapprove_off"))
async def approve_off(cb: CallbackQuery, callback_data: dict):
    bot_dc = await bots_db.get(int(callback_data["id"]))
    bot_dc.settings.set_autoapprove(False)
    await bots_db.update(bot_dc)
    await open_settings(cb, callback_data)


@dp.callback_query_handler(bot_action.filter(action="users_collect_on"))
async def users_collect_on(cb: CallbackQuery, callback_data: dict):
    bot_dc = await bots_db.get(int(callback_data["id"]))
    bot_dc.settings.set_users_collect(True)
    await bots_db.update(bot_dc)
    await open_settings(cb, callback_data)


@dp.callback_query_handler(bot_action.filter(action="users_collect_off"))
async def users_collect_off(cb: CallbackQuery, callback_data: dict):
    await cb.answer("üë©‚ÄçüíªIn development")
    # bot_dc = await bots_db.get(int(callback_data["id"]))
    # bot_dc.settings.set_users_collect(False)
    # await bots_db.update(bot_dc)
    # await open_settings(cb, callback_data)
