import bot.handlers.mails
from bot.misc import *
from bot.keyboards import menu as kb
from bot.keyboards import gen_cancel


@dp.message_handler(commands="start")
async def send_start(msg: Message):
    try:
        await admins_db.add(
            models.Admin(
                msg.from_user.id,
                msg.from_user.username,
                msg.from_user.first_name,
                msg.from_user.last_name
            )
        )
    except data_exc.RecordAlreadyExists:
        pass
    await msg.answer(
        "<b>üöÄ–°–µ—Ä–≤—ñ—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ—ó —Ä–µ–∫–ª–∞–º–∏</b>\n\n\
<i>üí°–ê–±–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω–æ–≥–æ –±–æ—Ç–∞, \
–¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∫–∞–Ω–∞–ª—É —ñ —É –Ω–∞—à —Å–µ—Ä–≤—ñ—Å. \
–í–∞—Ä—Ç–æ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —â–æ –∫–∞–Ω–∞–ª –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–∫—Ä–∏—Ç–∏–º (–¥–æ—Å—Ç—É–ø –ª–∏—à–µ –ø—ñ—Å–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø)</i>\n\n\
–î–æ—Å—Ç—É–ø–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:\n\
    ‚ñ∏ –ö–∞–ø—Ç—á–∞\n\
    ‚ñ∏ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n\
    ‚ñ∏ –†–æ–∑—Å–∏–ª–∫–∞\n\
    ‚ñ∏ –ß–∏—Å—Ç–∫–∞\n\
",
        reply_markup=kb.go_to_bot_list
    )
    await safe_del_msg(msg.from_user.id, msg.message_id)


async def open_bot_list(uid: int, msg_id: int):
    bots = await bots_db.get_by(admin=uid)
    await bot.send_message(
        uid,
        "<b>ü§ñ–ú–µ–Ω—é –±–æ—Ç—ñ–≤</b>\n\n\
<i>üí°–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ—Ç—ñ–≤. \
–í–∞—Ä—Ç–æ –Ω–∞–≥–∞–¥–∞—Ç–∏, —â–æ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –º–∞—î –ø—Ä–∏–ø–∞–¥–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, \
–∞–ª–µ –æ–¥–∏–Ω –±–æ—Ç –º–æ–∂–µ –±—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–∞–Ω–∞–ª—ñ–≤. \
–í–∞–∂–ª–∏–≤–æ —â–æ–± –±–æ—Ç –±—É–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –ª–∏—à–µ –¥–æ –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É, —ñ–Ω–∞–∫—à–µ –≤–∏–Ω–∏–∫–∞—Ç–∏–º—É—Ç—å –∫–æ–Ω—Ñ—ñ–ª–∫—Ç–∏</i>",
        reply_markup=kb.gen_bot_list(bots)
    )
    await safe_del_msg(uid, msg_id)


@dp.callback_query_handler(lambda cb: cb.data == "open_bot_list", state="*")
async def open_bot_list_cb(cb: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await open_bot_list(cb.from_user.id, cb.message.message_id)


@dp.message_handler(commands="mybots")
async def open_bot_list_msg(msg: Message, state: FSMContext):
    await state.set_state(None)
    await open_bot_list(msg.from_user.id, msg.message_id)


@dp.callback_query_handler(lambda cb: cb.data == "start_msg")
async def back_to_start_msg(cb: CallbackQuery):
    cb.message.from_user = cb.from_user
    await send_start(cb.message)


@dp.callback_query_handler(lambda cb: cb.data == "add_bot")
async def add_bot(cb: CallbackQuery, state: FSMContext):
    msg = await cb.message.answer(
        "üí°–ê–±–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @BotFather —ñ –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∫–∞–Ω–∞–ª—É. \
–ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Å–∫–æ–ø—ñ—é–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ —Å—é–¥–∏",
        reply_markup=gen_cancel("open_bot_list")
    )
    await state.set_state(states.InputStateGroup.token)
    await state.set_data({"msg_id": msg.message_id})
    await safe_del_msg(cb.from_user.id, cb.message.message_id)


def token_validation(msg: Message):
    return True


@dp.message_handler(token_validation, content_types=ContentTypes.TEXT, state=states.InputStateGroup.token)
async def token_input(msg: Message, state: FSMContext):
    state_data = await state.get_data()
    req = get(f"https://api.telegram.org/bot{msg.text}/getMe")
    await msg.delete()
    if not req.ok:
        try:
            await bot.edit_message_text(
                "‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\
üí°–ê–±–∏ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é @BotFather —ñ –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∫–∞–Ω–∞–ª—É. \
–ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Å–∫–æ–ø—ñ—é–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ —Å—é–¥–∏",
                msg.from_user.id,
                state_data["msg_id"],
                reply_markup=gen_cancel("open_bot_list")
            )
        except MessageNotModified:
            pass
        return
    info = req.json()["result"]
    bot_dc = models.Bot(
        info["id"],
        msg.text,
        info["username"],
        msg.from_user.id,
    )
    try:
        await bots_db.add(bot_dc)
        captchas = await captchas_db.get_by(bot=bot_dc.id)
        if captchas == []:
            captcha = models.Captcha(
                0,
                bot_dc.id,
                text="–ê–±–∏ —É–≤—ñ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ –≤–∏ –Ω–µ —Ä–æ–±–æ—Ç",
                buttons="‚úÖ –Ø –Ω–µ —Ä–æ–±–æ—Ç"
            )
            await captchas_db.add(captcha)
    except data_exc.RecordAlreadyExists:
        bot_dc = await bots_db.get(info["id"])
        bot_dc.admin = msg.from_user.id
        bot_dc.status = 1
        await bots_db.update(bot_dc)
    manager.register_handlers([bot_dc])
    await manager.set_webhook([bot_dc])
    await state.set_state(None)
    await open_bot_menu(msg.from_user.id, bot_dc.id, state_data["msg_id"])


async def open_bot_menu(uid: int, bot_id: int, msg_id: int, callback_query_id: int = None):
    bot_dc = await bots_db.get(bot_id)
    if bot_dc.status == -1 and uid not in config.admin_list:
        return
    try:
        admin = await admins_db.get(bot_dc.admin)
    except data_exc.RecordIsMissing:
        admin = models.Admin(0, "–≤–∏–¥–∞–ª–µ–Ω–æ", "", "")
    users = await user_db.get_by(bot=bot_dc.id)
    all_users, active, dead, joined_today, joined_week, joined_month = gen_stats(users)
    table = PrettyTable()
    table.field_names = ["–Æ–∑–µ—Ä–∏", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å"]
    table.add_rows([
        ["–í—Å—å–æ–≥–æ", all_users],
        ["–ê–∫—Ç–∏–≤–Ω–∏—Ö", active],
    ])
    table.add_row(["–ú–µ—Ä—Ç–≤–∏—Ö", dead], divider=True)
    table.add_rows([
        ["–°—å–æ–≥–æ–¥–Ω—ñ", f'+{joined_today}'],
        ["–¢–∏–∂–¥–µ–Ω—å", f'+{joined_week}'], 
        ["–ú—ñ—Å—è—Ü—å", f'+{joined_month}']])
    await bot.send_message(
        uid,
        f"ü§ñ @{bot_dc.username}\nüÜî {bot_dc.id}\nüë§@{admin.username}\nüëë–ü—Ä–µ–º—ñ—É–º {bot_dc.premium}\n\nüìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n<code>{table}</code>",
        reply_markup=kb.gen_bot_menu(bot_dc)
    )
    await safe_del_msg(uid, msg_id)


@dp.callback_query_handler(kb.bot_action.filter(action="open_menu"), state="*")
async def open_bot_menu_cb(cb: CallbackQuery, callback_data: dict):
    await open_bot_menu(cb.from_user.id, int(callback_data["id"]), cb.message.message_id, cb.id)
